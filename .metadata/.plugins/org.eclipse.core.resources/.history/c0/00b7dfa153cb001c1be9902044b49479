import java.util.*;
import java.io.*;
import java.awt.*;

/**
 * Class to set up the world for game play in Ultima
 * 
 * @author Keith Vertanen
 * @author Michele Van Dyne - eliminated use of StdIn, added commenting
 * @author Kris McCoy - changed key input handling to reduce input buffering
 * @author Dagar Rehan - Added preferred window sizing with view window offset
 * @author Bilma - Added recursive torch lighting method   
 *
 */
public class World {
	public static int[][] straightDirections = {{0,1},{0,-1},{1,0},{-1,0}};
	public static int[][] diagonalDirections = {{1,-1},{1,1},{-1,1},{-1,-1}};
	public static int offSetX = 0;            
	public static int offSetY = 0;
	public final static double DISPLAY_DAMAGE_SEC = 1.0;    // How long to display health after damage   
	public final static int ticksPerSecond = 30;

	private Tile [][] tiles     = null;         // Stores all the tiles in a 2D array
	private int width           = 0;            // Stores the width, first dimension in array
	private int height          = 0;            // Stores the height, second dimension in array
	private Avatar avatar       = null;         // Where the player is

	private int preferredWindowSizeX = 30;
	private int preferredWindowSizeY = 30;
	private int windowSizeX;
	private int windowSizeY;

	private ArrayList<Monster> monsters = new ArrayList<Monster>();     // Holds the monster objects

	/**
	 * Constructor for the world class
	 * @param filename - the String name of a file that will hold the configuration parameters for the world
	 */
	public World(String filename)
	{
		try
		{
			Scanner scan = new Scanner(new File(filename));

			// First two lines specify the size of the world
			width   = scan.nextInt();
			height  = scan.nextInt();

			windowSizeX = Math.min(preferredWindowSizeX, width);
			windowSizeY = Math.min(preferredWindowSizeY, height);

			// Read in the avatar data from file
			avatar = new Avatar(scan.nextInt(),         // x-position 
					scan.nextInt(),         // y-position
					scan.nextInt(),         // hit points
					scan.nextInt(),         // damage
					scan.nextDouble(),		// torch radius
					100 * ticksPerSecond / 1000);

			tiles = new Tile[width][height];

			// Read in the map tiles from file
			for (int i = 0; i < height; i++) {
				for (int j = 0; j < width; j++) {                   
					String code = scan.next();
					tiles[j][height - i - 1] = new Tile(code, j, height - i - 1);
				}
			}

			// Read in the monsters from file
			while (scan.hasNext()) {
				Monster monster = new Monster(
						this,                 // reference to the World object
						scan.next(),          // code for type of monster
						scan.nextInt(),       // x-location
						scan.nextInt(),       // y-location
						scan.nextInt(),       // hit points
						scan.nextInt(),       // damage points
						scan.nextInt() * ticksPerSecond / 1000,       // sleep ms
						scan.next(),          // code for type of movement
						scan.nextInt()        // aggroRadius
						);      
				monsters.add(monster);
			}
			scan.close();
		} catch (FileNotFoundException e) {
			System.out.println("Failed to load file: " + filename);
		}

		// Set up the drawing canvas size  
		int canvasX = Math.min(width, windowSizeX);
		int canvasY = Math.min(height, windowSizeY);           

		StdDraw.setCanvasSize(canvasX * Tile.SIZE, canvasY * Tile.SIZE);
		if (width < windowSizeX ){
			StdDraw.setXscale(0.0, width * Tile.SIZE);
		} else {
			StdDraw.setXscale(0.0, windowSizeX * Tile.SIZE);
		}
		if (height < windowSizeY ){
			StdDraw.setYscale(0.0, height * Tile.SIZE);
		} else {
			StdDraw.setYscale(0.0, windowSizeY * Tile.SIZE);
		}

		// Initial lighting
		light(avatar.getX(), avatar.getY(), avatar.getTorchRadius());

		// Fire up the monster threads
		//for (Monster monster : monsters) {
		//Thread thread = new Thread(monster);
		//thread.start();
		//}
	}

	/**
	 * Accessor for the matrix of Tile objects
	 */
	public Tile[][] getTileMatrix() {
		return tiles;
	}

	public Tile getTile(Location l) {
		return inBounds(l) ? tiles[l.getX()][l.getY()] : null;
	}

	//  public Tile getTile(Entity e) {
	//       return getTile(e.getLocation());
	//    }

	/**
	 * Accessor for the Tile the Avatar is currently occupying        
	 */
	public Tile getAvatarTile() {
		return tiles[avatar.getX()][avatar.getY()];
	}


	/**
	 * Figure out if the game should end
	 * @return true if avatar still alive, false otherwise
	 */
	public boolean avatarAlive() {
		return (avatar.getHitPoints() > 0);
	}

	/**
	 * Monster attempting to move to (x, y)
	 *      Damage is how much damage this monster will cause if they hit Avatar.
	 * @param x - the new x location of a monster
	 * @param y - the new y location of a monster
	 * @param monster - the monster to be moved
	 */
	public synchronized void monsterMove(int x, int y, Monster monster) {
		// Can't attempt to move off board
		if ((x < 0) || (y < 0) || (x >= width) || ( y >= height))
			return;

		// Dead monsters move off the board
		if (monster.getHitPoints() <= 0) {
			monster.setLocation(-1, -1);
			return;
		}

		// See if we can't actually move there
		if (!tiles[x][y].isPassable())
			return;

		// Check if avatar is in this location.  If so, attack but stay put.
		if ((avatar.getX() == x) && (avatar.getY() == y)) {
			avatar.incurDamage(monster.getAttackDamage()); //attack avatar
			//if standing in lava, get hurt
			int damage = tiles[monster.getX()][monster.getY()].getDamage();
			if (damage > 0)
				monster.incurDamage(damage);
			return;
		}

		// If there's a monster already in our destination, don't move there.                
		if (tiles[x][y].isOccupied())
			return;

		// If we haven't returned yet, must be a valid move.  Relocate.
		monster.setLocation(x, y);

		// if new location is lava, get hurt
		int damage = tiles[x][y].getDamage();
		if (damage > 0)
			monster.incurDamage(damage);
	}

	/**
	 * Attempt to move the Avatar to the new (x, y) location.
	 * @param x - the new x location
	 * @param y - the new y location
	 */
	public synchronized void avatarMove(int x, int y) {

		// Can't attempt to move off board
		if ((x < 0) || (y < 0) || (x >= width) || ( y >= height))
			return;

		// See if we can't actually move there
		if (!tiles[x][y].isPassable())
			return;

		// Check to see if there is a monster there
		for (Monster monster : monsters) {
			if ((monster.getX() == x) && (monster.getY() == y)) {
				monster.incurDamage(avatar.getDamage());
				return;
			}
		}       
		int damage = tiles[x][y].getDamage();
		if (damage > 0)
			avatar.incurDamage(damage);
		avatar.setLocation(x, y);
	}



	/**
	 * Handle keyboard input
	 * @param ch - the character input from the keyboard
	 */
	public void handleKeyPress() {
		if (!avatar.canMove())
			return;
		char key = 0;
		char[] keyOptions = {'w','W','a','A','s','S','d','D','-','+','='};

		for (char k : keyOptions) 
			if (StdDraw.isKeyPressed((int)k)) {
				key = k;
				break; //be content with first key found            
			}

		//If no key currently pressed, is there a pending move in the buffer?
		if (key == 0 && StdDraw.hasNextKeyTyped()) { 
			key = StdDraw.nextKeyTyped();            
		}

		//Empty the buffer (as only 1 move is allowed to be buffered) (prevents input lag)
		while (StdDraw.hasNextKeyTyped()) 
			StdDraw.nextKeyTyped();

		int deltaX = 0;
		int deltaY = 0;
		switch (key) {   
		case 'W':
		case 'w':   
			avatar.setDirection(Avatar.Facing.UP);
			deltaY++;
			break;
		case 'S':
		case 's':
			avatar.setDirection(Avatar.Facing.DOWN);    
			deltaY--;
			break;
		case 'A':
		case 'a':       
			avatar.setDirection(Avatar.Facing.LEFT);
			deltaX--;
			break;
		case 'D':
		case 'd':   
			avatar.setDirection(Avatar.Facing.RIGHT);    
			deltaX++;
			break;
		case '=':
		case '+':
			avatar.increaseTorch();
			break;
		case '-':               
			avatar.decreaseTorch();
			break;          
		}

		if ((deltaX != 0) || (deltaY != 0)) {
			int x = avatar.getX() + deltaX;
			int y = avatar.getY() + deltaY;
			avatarMove(x, y);
		}

		//after a move, adjust which tiles are lit by the torch
		light(avatar.getX(), avatar.getY(), avatar.getTorchRadius());      
	}   

	/**
	 * Ticks all entities and tiles
	 */
	public void tick() {
		for (int x = 0; x < tiles.length; x++) {
			for (int y = 0; y < tiles[x].length; y++) {
				tiles[x][y].tick();
			}
		}

		for (int i = monsters.size() - 1; i >= 0; i--) {
			monsters.get(i).tick();
		}

		avatar.tick();
	}


	/**
	 * Draw all the lit tiles
	 */
	public synchronized void draw() {
		//Determine offSet (difference between actual map and just the part in our view window)
		offSetX = avatar.getX() - windowSizeX / 2;
		offSetY = avatar.getY() - windowSizeY / 2;      
		if (offSetX < 0) offSetX = 0;
		if (offSetY < 0) offSetY = 0;
		if (offSetX > width - windowSizeX) offSetX = width - windowSizeX;
		if (offSetY > height - windowSizeY) offSetY = height - windowSizeY;

		for (int x = 0 + offSetX; x < offSetX + windowSizeX; x++) {
			for (int y = 0 + offSetY; y < offSetY + windowSizeY; y++) {
				tiles[x][y].draw(x,y);
			}
		}

		for (int i = monsters.size() - 1; i >=0; i--) {
			Monster monster = monsters.get(i);
			int x = monster.getX();
			int y = monster.getY();

			// Draw monsters, but not the dead ones
			if (monster.getHitPoints() <= 0) {
				monsters.remove(i);
			} else {
				if (tiles[x][y].getLit())
					monster.draw();
			}
		}  

		avatar.draw();
		//light(avatar.getX(),avatar.getY(),avatar.getTorchRadius());
		light();
	}

	/**
	 * Return the number of alive monsters
	 * @return
	 */
	public int getNumMonsters() {
		return monsters.size();
	}

	/**
	 * Set all tiles to either on or off
	 * @param value true (for lit), false otherwise
	 */
	private void setAllTilesLit(boolean value) {
		for (int x = 0 ; x < width; x++) 
			for (int y = 0; y < height; y++)
				tiles[x][y].setLit(value);               
	}  

	/**
	 * Light the current position and all tiles to a surrounding radius
	 * @param x - the current x position
	 * @param y - the current y position
	 * @param r - the radius of the avatar's torch
	 * @return the number of tiles that were lit
	 */
	public int light(int x, int y, double r) {
		setAllTilesLit(false); //Set all tiles to unlit
		boolean[][] visited = new boolean[width][height];
		int result = light(x, y, x, y, r,visited);      
		return result;
	}

	/**
	 * Recursively light from (x, y) limiting to radius r
	 * @param x - the initial x position
	 * @param y - the initial y position
	 * @param currentX - the current x position
	 * @param currentY - the current y position
	 * @param r - the radius of the avatar's torch
	 * @return the number of tiles lit
	 */
	private int light(int x, int y, int currentX, int currentY, double r, boolean[][] visited)  {
		if (!inBounds(currentX,currentY)|| visited[currentX][currentY] || euclideanDistance(x,y,currentX,currentY) > r)
			return 0;
		visited[currentX][currentY] = true;
		tiles[currentX][currentY].setLit(true);
		int sum = 1;
		for (int[] direction : straightDirections)
			sum += light(x,y,currentX + direction[0],currentY + direction[1],r,visited);
		return sum;
	}

	private void light() {
		double drawX = (avatar.getX() + 0.5 - offSetX) * Tile.SIZE;
		double drawY = (avatar.getY() + 0.5 - offSetY) * Tile.SIZE;

		StdDraw.picture(drawX, drawY, "torch.png", avatar.getTorchRadius() * 2 * Tile.SIZE, avatar.getTorchRadius() * 2 * Tile.SIZE);

		StdDraw.setPenColor(Color.BLACK);

		//top rect
		double x = (windowSizeX * Tile.SIZE)/2;
		double y = (windowSizeY * Tile.SIZE) + ((avatar.getY() + 0.5 + avatar.getTorchRadius() - offSetY) * Tile.SIZE)/2;
		double width = (windowSizeX * Tile.SIZE)/2;
		double height = (windowSizeY * Tile.SIZE) - ((avatar.getY() + 0.5 + avatar.getTorchRadius() - offSetY) * Tile.SIZE)/2;
		if (x >= 0 && y >= 0 && width >= 0 && height >= 0)
			StdDraw.filledRectangle(x, y, width, height);

		//bottom rect
		y = ((avatar.getY() + 0.5 - avatar.getTorchRadius() - offSetY) * Tile.SIZE) / 2;
		height = ((avatar.getY() + 0.5 - avatar.getTorchRadius() - offSetY) * Tile.SIZE) / 2;

		if (x >= 0 && y >= 0 && width >= 0 && height >= 0)
			StdDraw.filledRectangle(x, y, width, height);

		//left rect
		x = ((avatar.getX() + 0.5 - avatar.getTorchRadius() - offSetX) * Tile.SIZE)/2;
		y = (windowSizeY * Tile.SIZE)/2;
		width = ((avatar.getX() + 0.5 - avatar.getTorchRadius() - offSetX) * Tile.SIZE)/2;
		height = (windowSizeY * Tile.SIZE)/2;
		if (x >= 0 && y >= 0 && width >= 0 && height >= 0)
			StdDraw.filledRectangle(x, y, width, height);

		//right rect
		x = (windowSizeX * Tile.SIZE)/2 + ((avatar.getX() + 0.5 + avatar.getTorchRadius() - offSetX) * Tile.SIZE)/2;
		width = (windowSizeX * Tile.SIZE)/2 - ((avatar.getX() + 0.5 + avatar.getTorchRadius() - offSetX) * Tile.SIZE)/2;
		if (x >= 0 && y >= 0 && width >= 0 && height >= 0)
			StdDraw.filledRectangle(x, y, width, height);
	}    

	/**
	 * 
	 * 
	 */
	public static double euclideanDistance(int x1, int y1, int x2, int y2) {
		return Math.sqrt(Math.pow(x2 - x1,2) + Math.pow(y2 - y1,2));
	}

	public static double euclideanDistance(Location t1, int x2, int y2) {
		return euclideanDistance(t1.getX(),t1.getY(), x2, y2);
	}

	public static double euclideanDistance(Tile t1, int x2, int y2) {
		return euclideanDistance(t1.getX(),t1.getY(), x2, y2);
	}

	public static double euclideanDistance(int x1, int y1, Location t2) {
		return euclideanDistance(x1,y1,t2.getX(),t2.getY());
	}

	public static double euclideanDistance(int x1, int y1, Tile t2) {
		return euclideanDistance(x1,y1,t2.getX(),t2.getY());
	}

	public static double euclideanDistance(Location l1, Location l2) {
		return euclideanDistance(l1.getX(),l1.getY(),l2.getX(),l2.getY());
	}

	public static double euclideanDistance(Tile l1, Tile l2) {
		return euclideanDistance(l1.getX(),l1.getY(),l2.getX(),l2.getY());
	}


	/**
	 * 
	 * 
	 */
	public boolean inBounds(int x, int y) {
		return x >= 0 && x < width && y >= 0 && y < height;
	}

	public boolean inBounds(Location l) {
		return l.getX() >= 0 && l.getX() < width && l.getY() >= 0 && l.getY() < height;
	}



	/**
	 * 
	 * 
	 */
	public boolean isPassable(int x, int y) {
		return inBounds(x,y) && tiles[x][y].isPassable();
	}

	public boolean isOccupied(int x, int y) {
		if (!inBounds(x,y))
			return false;
		return tiles[x][y].isOccupied();
	}

	public Avatar getAvatar() {
		return avatar;
	}
}
